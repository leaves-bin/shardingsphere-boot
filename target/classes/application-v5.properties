###################
#数据源
spring.shardingsphere.datasource.names=test1,test2,slave1,slave2
spring.shardingsphere.datasource.common.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.common.driver-class-name=com.mysql.jdbc.Driver

spring.shardingsphere.datasource.test1.url=jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf-8&useSSL=false
spring.shardingsphere.datasource.test1.username=root
spring.shardingsphere.datasource.test1.password=root

spring.shardingsphere.datasource.test2.url=jdbc:mysql://localhost:3306/test2?useUnicode=true&characterEncoding=utf-8&useSSL=false
spring.shardingsphere.datasource.test2.username=root
spring.shardingsphere.datasource.test2.password=root

spring.shardingsphere.datasource.slave1.url=jdbc:mysql://localhost:3306/test2?useUnicode=true&characterEncoding=utf-8&useSSL=false
spring.shardingsphere.datasource.slave1.username=root
spring.shardingsphere.datasource.slave1.password=root

spring.shardingsphere.datasource.slave2.url=jdbc:mysql://localhost:3306/test2?useUnicode=true&characterEncoding=utf-8&useSSL=false
spring.shardingsphere.datasource.slave2.username=root
spring.shardingsphere.datasource.slave2.password=root

#分片配置
spring.shardingsphere.rules.sharding.tables.order.actual-data-nodes=test$->{1..2}.order_$->{0..1}

##分布式序列配置
spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
spring.shardingsphere.rules.sharding.key-generators.snowflake.props.max-vibration-offset=0
spring.shardingsphere.rules.sharding.key-generators.snowflake.props.worker-id=2

##分库规则
spring.shardingsphere.rules.sharding.sharding-algorithms.dbstrategy.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.dbstrategy.props.algorithm-expression=test$->{ Long.parseLong(sku.replaceAll('[a-z]','').replaceAll('[A-Z]','')) % 2 + 1}
##分表规则
spring.shardingsphere.rules.sharding.sharding-algorithms.tbstrategy.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.tbstrategy.props.algorithm-expression=order_$->{ Long.parseLong(sku.replaceAll('[a-z]','').replaceAll('[A-Z]','')) % 2}

##库配置
spring.shardingsphere.rules.sharding.tables.order.database-strategy.standard.sharding-column=sku
spring.shardingsphere.rules.sharding.tables.order.database-strategy.standard.sharding-algorithm-name=dbstrategy
##分表配置
spring.shardingsphere.rules.sharding.tables.order.table-strategy.standard.sharding-column=sku
spring.shardingsphere.rules.sharding.tables.order.table-strategy.standard.sharding-algorithm-name=tbstrategy
##分布式ID
spring.shardingsphere.rules.sharding.tables.order.key-generate-strategy.column=order_no 
spring.shardingsphere.rules.sharding.tables.order.key-generate-strategy.key-generator-name=snowflake 

## 默认分片配置
spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-column=sku
spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-algorithm-name=dbstrategy

#读写分离
spring.shardingsphere.rules.replica-query.data-sources.readwrite.name=readwrite
spring.shardingsphere.rules.replica-query.data-sources.readwrite.primary-data-source-name=test1
spring.shardingsphere.rules.replica-query.data-sources.readwrite.replica-data-source-names=slave1
spring.shardingsphere.rules.replica-query.data-sources.readwrite1.name=readwrite1
spring.shardingsphere.rules.replica-query.data-sources.readwrite1.primary-data-source-name=test2
spring.shardingsphere.rules.replica-query.data-sources.readwrite1.replica-data-source-names=slave2

spring.shardingsphere.rules.replica-query.load-balancers.balancers.type=ROUND_ROBIN
spring.shardingsphere.rules.replica-query.load-balancers.balancers.props.value=value

#数据加密
##加密算法
spring.shardingsphere.rules.encrypt.encryptors.haesencrypt.type=HAES
spring.shardingsphere.rules.encrypt.encryptors.haesencrypt.props.haes-key-value=123456

spring.shardingsphere.rules.encrypt.tables.order.name=orderEncryptMobile
spring.shardingsphere.rules.encrypt.tables.order.columns.mobile.cipher-column=mobile
spring.shardingsphere.rules.encrypt.tables.order.columns.mobile.encryptor-name=haesencrypt
