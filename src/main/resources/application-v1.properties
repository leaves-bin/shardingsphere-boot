###################数据分片 #YamlShardingRuleSpringBootConfiguration
#数据源
spring.shardingsphere.datasource.names=test1,test2

spring.shardingsphere.datasource.test1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.test1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.test1.url=jdbc:mysql://localhost:3306/test_1?useUnicode=true&characterEncoding=utf-8&useSSL=false
spring.shardingsphere.datasource.test1.username=root
spring.shardingsphere.datasource.test1.password=root

spring.shardingsphere.datasource.test2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.test2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.test2.url=jdbc:mysql://localhost:3306/test_2?useUnicode=true&characterEncoding=utf-8&useSSL=false
spring.shardingsphere.datasource.test2.username=root
spring.shardingsphere.datasource.test2.password=root

#分片配置
spring.shardingsphere.rules.sharding.tables.order.actual-data-nodes=test$->{1..2}.order_$->{1..2}

##分布式序列配置
spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
spring.shardingsphere.rules.sharding.key-generators.snowflake.props.max-vibration-offset=2048
spring.shardingsphere.rules.sharding.key-generators.snowflake.props.worker-id=1

##分库规则
spring.shardingsphere.rules.sharding.sharding-algorithms.dbstrategy.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.dbstrategy.props.algorithm-expression=test$->{ if(sku>100){Long.parseLong(sku.replaceAll('[a-z]','').replaceAll('[A-Z]','')) % 2 + 1}else if{1}else{2}}
##分表规则
spring.shardingsphere.rules.sharding.sharding-algorithms.tbstrategy.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.tbstrategy.props.algorithm-expression=order_$->{ if(sku>100){Long.parseLong(sku.replaceAll('[a-z]','').replaceAll('[A-Z]','')) % 2 + 1}else if{1}else{2}}

##库配置
spring.shardingsphere.rules.sharding.tables.order.database-strategy.standard.sharding-column=sku
spring.shardingsphere.rules.sharding.tables.order.database-strategy.standard.sharding-algorithm-name=dbstrategy
##分表配置
spring.shardingsphere.rules.sharding.tables.order.table-strategy.standard.sharding-column=sku
spring.shardingsphere.rules.sharding.tables.order.table-strategy.standard.sharding-algorithm-name=tbstrategy
##分布式ID
spring.shardingsphere.rules.sharding.tables.order.key-generate-strategy.column=order_no 
spring.shardingsphere.rules.sharding.tables.order.key-generate-strategy.key-generator-name=snowflake 

## 默认分片配置
#spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-column=sku
#spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-algorithm-name=dbstrategy

#spring.shardingsphere.rules.sharding.binding-tables[0]=order
